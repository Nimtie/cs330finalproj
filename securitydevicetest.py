import unittest
from securitydeviceMoreFSM import change_state


class TestSecDevice(unittest.TestCase):

    def test_states(self):
        self.assertEqual(change_state('qinit', '0'), ('qinit', ''))
        self.assertEqual(change_state('qinit', '1'), ('qinit', ''))
        self.assertEqual(change_state('qinit', '2'), ('qinit', ''))
        self.assertEqual(change_state('qinit', '3'), ('qinit', ''))
        self.assertEqual(change_state('qinit', '4'), ('qinit', ''))
        self.assertEqual(change_state('qinit', '5'), ('qinit', ''))
        self.assertEqual(change_state('qinit', '6'), ('qinit', ''))
        self.assertEqual(change_state('qinit', '7'), ('qinit', ''))
        self.assertEqual(change_state('qinit', '8'), ('q1', ''))
        self.assertEqual(change_state('qinit', '9'), ('qinit', ''))
        self.assertEqual(change_state('qinit', '10'), ('qinit', ''))  # Testing number that has more than one digit
        self.assertEqual(change_state('qinit', 'a'), ('qinit', ''))  # Testing something other than a digit

        self.assertEqual(change_state('q1', '0'), ('qinit', ''))
        self.assertEqual(change_state('q1', '1'), ('qinit', ''))
        self.assertEqual(change_state('q1', '2'), ('qinit', ''))
        self.assertEqual(change_state('q1', '3'), ('qinit', ''))
        self.assertEqual(change_state('q1', '4'), ('qinit', ''))
        self.assertEqual(change_state('q1', '5'), ('qinit', ''))
        self.assertEqual(change_state('q1', '6'), ('qinit', ''))
        self.assertEqual(change_state('q1', '7'), ('qinit', ''))
        self.assertEqual(change_state('q1', '8'), ('qinit', ''))
        self.assertEqual(change_state('q1', '9'), ('q2', ''))
        self.assertEqual(change_state('q1', '10'), ('q1', ''))
        self.assertEqual(change_state('q1', 'a'), ('q1', ''))

        self.assertEqual(change_state('q2', '0'), ('qinit', ''))
        self.assertEqual(change_state('q2', '1'), ('qinit', ''))
        self.assertEqual(change_state('q2', '2'), ('qinit', ''))
        self.assertEqual(change_state('q2', '3'), ('qinit', ''))
        self.assertEqual(change_state('q2', '4'), ('q3', ''))
        self.assertEqual(change_state('q2', '5'), ('qinit', ''))
        self.assertEqual(change_state('q2', '6'), ('qinit', ''))
        self.assertEqual(change_state('q2', '7'), ('qinit', ''))
        self.assertEqual(change_state('q2', '8'), ('qinit', ''))
        self.assertEqual(change_state('q2', '9'), ('qinit', ''))
        self.assertEqual(change_state('q2', '10'), ('q2', ''))
        self.assertEqual(change_state('q2', 'a'), ('q2', ''))

        self.assertEqual(change_state('q3', '0'), ('qinit', ''))
        self.assertEqual(change_state('q3', '1'), ('qinit', ''))
        self.assertEqual(change_state('q3', '2'), ('qinit', ''))
        self.assertEqual(change_state('q3', '3'), ('qinit', ''))
        self.assertEqual(change_state('q3', '4'), ('qinit', ''))
        self.assertEqual(change_state('q3', '5'), ('qinit', ''))
        self.assertEqual(change_state('q3', '6'), ('q4', ''))
        self.assertEqual(change_state('q3', '7'), ('qinit', ''))
        self.assertEqual(change_state('q3', '8'), ('qinit', ''))
        self.assertEqual(change_state('q3', '9'), ('qinit', ''))
        self.assertEqual(change_state('q3', '10'), ('q3', ''))
        self.assertEqual(change_state('q3', 'a'), ('q3', ''))

        self.assertEqual(change_state('q4', '0'), ('qinit', ''))
        self.assertEqual(change_state('q4', '1'), ('qinit', ''))
        self.assertEqual(change_state('q4', '2'), ('q5', ''))
        self.assertEqual(change_state('q4', '3'), ('qinit', ''))
        self.assertEqual(change_state('q4', '4'), ('qinit', ''))
        self.assertEqual(change_state('q4', '5'), ('qinit', ''))
        self.assertEqual(change_state('q4', '6'), ('qinit', ''))
        self.assertEqual(change_state('q4', '7'), ('qinit', ''))
        self.assertEqual(change_state('q4', '8'), ('qinit', ''))
        self.assertEqual(change_state('q4', '9'), ('qinit', ''))
        self.assertEqual(change_state('q4', '10'), ('q4', ''))
        self.assertEqual(change_state('q4', 'a'), ('q4', ''))

        self.assertEqual(change_state('q5', '0'), ('qinit', ''))
        self.assertEqual(change_state('q5', '1'), ('qunlock', 'unlock'))
        self.assertEqual(change_state('q5', '2'), ('qinit', ''))
        self.assertEqual(change_state('q5', '3'), ('qinit', ''))
        self.assertEqual(change_state('q5', '4'), ('qlock', 'lock'))
        self.assertEqual(change_state('q5', '5'), ('qinit', ''))
        self.assertEqual(change_state('q5', '6'), ('qinit', ''))
        self.assertEqual(change_state('q5', '7'), ('qinit', ''))
        self.assertEqual(change_state('q5', '8'), ('qinit', ''))
        self.assertEqual(change_state('q5', '9'), ('qinit', ''))
        self.assertEqual(change_state('q5', '10'), ('q5', ''))
        self.assertEqual(change_state('q5', 'a'), ('q5', ''))

        self.assertEqual(change_state('qunlock', '0'), ('qinit', ''))
        self.assertEqual(change_state('qunlock', '1'), ('qinit', ''))
        self.assertEqual(change_state('qunlock', '2'), ('qinit', ''))
        self.assertEqual(change_state('qunlock', '3'), ('qinit', ''))
        self.assertEqual(change_state('qunlock', '4'), ('qinit', ''))
        self.assertEqual(change_state('qunlock', '5'), ('qinit', ''))
        self.assertEqual(change_state('qunlock', '6'), ('qinit', ''))
        self.assertEqual(change_state('qunlock', '7'), ('qinit', ''))
        self.assertEqual(change_state('qunlock', '8'), ('q1', ''))
        self.assertEqual(change_state('qunlock', '9'), ('qinit', ''))
        self.assertEqual(change_state('qunlock', '10'), ('qunlock', ''))
        self.assertEqual(change_state('qunlock', 'a'), ('qunlock', ''))

        self.assertEqual(change_state('qlock', '0'), ('qinit', ''))
        self.assertEqual(change_state('qlock', '1'), ('qinit', ''))
        self.assertEqual(change_state('qlock', '2'), ('qinit', ''))
        self.assertEqual(change_state('qlock', '3'), ('qinit', ''))
        self.assertEqual(change_state('qlock', '4'), ('qinit', ''))
        self.assertEqual(change_state('qlock', '5'), ('qinit', ''))
        self.assertEqual(change_state('qlock', '6'), ('qinit', ''))
        self.assertEqual(change_state('qlock', '7'), ('qinit', ''))
        self.assertEqual(change_state('qlock', '8'), ('q1', ''))
        self.assertEqual(change_state('qlock', '9'), ('qinit', ''))
        self.assertEqual(change_state('qlock', '10'), ('qlock', ''))
        self.assertEqual(change_state('qlock', 'a'), ('qlock', ''))


if __name__ == '__main__':
    unittest.main()
